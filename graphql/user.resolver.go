package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"errors"
	"fmt"

	"github.com/elisalimli/go_graphql_template/graphql/models"
)

var (
	ErrInput = errors.New("input errors")
)

func (m *mutationResolver) Login(ctx context.Context, input models.LoginInput) (*models.AuthResponse, error) {
	isValid, errors := validation(ctx, input)
	if !isValid {
		return &models.AuthResponse{Ok: false, Errors: errors}, nil
	}

	return m.Domain.Login(ctx, input)
}

func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

func (r *queryResolver) Hello(ctx context.Context) (string, error) {
	fmt.Println(ctx.Value("currentUser"))
	return "hello world", nil
}

func (m *mutationResolver) Register(ctx context.Context, input models.RegisterInput) (*models.AuthResponse, error) {
	isValid, errors := validation(ctx, input)
	if !isValid {
		return &models.AuthResponse{Ok: false, Errors: errors}, nil
	}

	return m.Domain.Register(ctx, input)
}

func (m *mutationResolver) RefreshToken(ctx context.Context) (*models.AuthResponse, error) {
	return m.Domain.RefreshToken(ctx)
}

func (m *mutationResolver) SendOtp(ctx context.Context, input models.SendOtpInput) (*models.FormResponse, error) {
	isValid, errors := validation(ctx, input)
	if !isValid {
		return &models.FormResponse{Ok: false, Errors: errors}, nil
	}

	return m.Domain.SendOtp(ctx, input)
}

func (m *mutationResolver) VerifyOtp(ctx context.Context, input models.VerifyOtpInput) (*models.FormResponse, error) {
	isValid, errors := validation(ctx, input)
	if !isValid {
		return &models.FormResponse{Ok: false, Errors: errors}, nil
	}

	return m.Domain.VerifyOtp(ctx, input)
}
