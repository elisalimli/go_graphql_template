scalar Time
# directive @auth on FIELD_DEFINITION

type FieldError {
  message: String!
  field: String!
}

interface FormResponse {
  ok: Boolean!
  errors: [FieldError]
}

type AuthResponse implements FormResponse {
  ok: Boolean!
  errors: [FieldError]
  authToken: AuthToken
  user: User
}

type AuthToken {
  token: String!
  expiredAt: Time!
}

type User {
  id: String!
  username: String!
  email: String!
  # meetups: [Meetup!]!
  createdAt: Time!
  updatedAt: Time!
}

# type Meetup {
#   id: ID!
#   name: String!
#   description: String!
#   user: User!
# }

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

# input NewMeetup {
#   name: String!
#   description: String!
# }

# input UpdateMeetup {
#   name: String
#   description: String
# }

# input MeetupFilter {
#   name: String
# }

type Query {
  # meetups(filter: MeetupFilter, limit: Int = 10, offset: Int = 0): [Meetup!]!
  users: [User!]!
  hello: String! 
}

type Mutation {
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  # createMeetup(input: NewMeetup!): Meetup!
  # updateMeetup(id: ID!, input: UpdateMeetup!): Meetup!
  # deleteMeetup(id: ID!): Boolean!
}